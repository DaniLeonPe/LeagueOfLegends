{"mappings":"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","sources":["<anon>","src/js/Campeon.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirea37a\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirea37a\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"N0Tqk\", function(module, exports) {\n\n$parcel$export(module.exports, \"Campeon\", () => $09354508ee2e2a25$export$f04f082b873ac4d4);\nclass $09354508ee2e2a25$export$f04f082b873ac4d4 {\n    constructor(data){\n        this.name = data.name; // Nombre del campeón\n        this.imageUrl = `https://ddragon.leagueoflegends.com/cdn/14.19.1/img/champion/${data.image.full}`; // URL de la imagen del campeón\n        this.title = data.title || \"Sin t\\xedtulo\"; // Título del campeón\n        this.id = data.id; // ID del campeón\n        this.skins = []; // Inicializar como un array vacío\n        this.roles = data.tags; // Roles del campeón\n        this.blurb = data.blurb; // Descripción del campeón\n        this.info = data.info; // Información de ataque, defensa, magia y dificultad\n        this.currentSkinIndex = 0; // Inicializar el índice de skin\n        this.abilities = []; // Inicializar como un array vacío para habilidades\n        // Cargar skins y habilidades\n        this.loadSkins();\n        this.loadAbilities();\n    }\n    async loadSkins() {\n        try {\n            const response = await fetch(`https://ddragon.leagueoflegends.com/cdn/14.19.1/data/es_MX/champion/${this.id}.json`);\n            const data = await response.json();\n            // Asignar la lista de skins\n            this.skins = data.data[this.id].skins;\n            console.log(\"Skins disponibles:\", this.skins); // Verificar las skins\n        } catch (error) {\n            console.error(\"Error al cargar las skins:\", error);\n        }\n    }\n    async loadAbilities() {\n        try {\n            const response = await fetch(`https://ddragon.leagueoflegends.com/cdn/14.19.1/data/es_MX/champion/${this.id}.json`);\n            const data = await response.json();\n            this.abilities = data.data[this.id].spells || []; // Asegúrate de que abilities sea un array\n            console.log(\"Habilidades disponibles:\", this.abilities); // Verificar las habilidades\n        } catch (error) {\n            console.error(\"Error al cargar las habilidades:\", error);\n        }\n    }\n    async checkImageExists(url) {\n        const response = await fetch(url, {\n            method: \"HEAD\"\n        });\n        return response.ok; // Verifica si la imagen existe\n    }\n    async cambiarSkin(championImg) {\n        const maxSkins = this.skins.length; // Total de skins disponibles\n        console.log(`Total de skins: ${maxSkins}`);\n        // Incrementa currentSkinIndex\n        this.currentSkinIndex = (this.currentSkinIndex + 1) % (maxSkins + 1); // Incrementa y devuelve el nuevo número de skin (modulo para volver al principio)\n        let skinUrl;\n        // Determine the URL for the current skin\n        if (this.currentSkinIndex === 0) // Skin original\n        skinUrl = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_0.jpg`;\n        else {\n            // Usar el id de la skin correcta\n            const skinId = this.skins[this.currentSkinIndex - 1].num; // Asegúrate de usar 'num' para obtener el número correcto de skin\n            skinUrl = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_${skinId}.jpg`;\n        }\n        const imageExists = await this.checkImageExists(skinUrl);\n        if (imageExists) championImg.src = skinUrl; // Cambia la imagen si existe\n        else {\n            // Si la imagen no existe, simplemente vuelve a la skin original\n            this.currentSkinIndex = 0; // Reinicia el índice\n            championImg.src = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_0.jpg`; // Cambia a la skin original\n        }\n    }\n    crearElemento() {\n        const championDiv = document.createElement(\"div\");\n        championDiv.classList.add(\"champion\");\n        const img = document.createElement(\"img\"); // Usar la etiqueta img para la imagen completa\n        img.src = this.imageUrl;\n        img.alt = this.name;\n        img.id = `img-${this.id}`; // Asignar un id a la imagen del campeón\n        const name = document.createElement(\"p\");\n        name.textContent = this.name;\n        const additionalInfo = document.createElement(\"div\");\n        additionalInfo.classList.add(\"additional-info\"); // Contenedor para información adicional\n        additionalInfo.innerHTML = `\n            <p><strong>Roles:</strong> ${this.roles.join(\", \")}</p>\n            <p><strong>T\\xedtulo:</strong> ${this.title}</p>\n        `;\n        championDiv.appendChild(img); // Agregar la imagen\n        championDiv.appendChild(name);\n        championDiv.appendChild(additionalInfo); // Agregar el contenedor de información adicional\n        // Evento para mostrar información del campeón\n        championDiv.addEventListener(\"click\", ()=>{\n            this.mostrarInformacionCampeon();\n        });\n        return championDiv;\n    }\n    mostrarInformacionCampeon() {\n        const fullImageUrl = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_0.jpg`;\n        // Crear o seleccionar el contenedor donde se mostrará la imagen grande\n        let imagenGrande = document.getElementById(\"imagen-grande\");\n        if (!imagenGrande) {\n            imagenGrande = document.createElement(\"div\");\n            imagenGrande.id = \"imagen-grande\";\n            document.body.appendChild(imagenGrande);\n        }\n        // Insertar la imagen y la información en el contenedor\n        imagenGrande.innerHTML = `\n            <div class=\"imagen-grande-container\">\n                <span id=\"cerrar-imagen-grande\">&times;</span>\n                <img id=\"img-grande\" src=\"${fullImageUrl}\" alt=\"Imagen Grande de ${this.name}\">\n                <div class=\"imagen-grande-texto\">\n                    <h2>${this.name}</h2>\n                    <p><strong>T\\xedtulo:</strong> ${this.title}</p>\n                    <p><strong>Descripci\\xf3n:</strong> ${this.blurb}</p>\n                    <h3>Atributos:</h3>\n                    <ul>\n                        <li><strong>Ataque:</strong> ${this.info.attack}</li>\n                        <li><strong>Defensa:</strong> ${this.info.defense}</li>\n                        <li><strong>Magia:</strong> ${this.info.magic}</li>\n                        <li><strong>Dificultad:</strong> ${this.info.difficulty}</li>\n                    </ul>\n                    <h3>Roles:</h3>\n                    <p>${this.roles.join(\", \")}</p>\n                    <h3>Habilidades:</h3>\n                    <div class=\"abilities\">\n                        ${this.abilities.length > 0 ? this.abilities.map((spell)=>`\n                            <div class=\"ability\">\n                                <img src=\"https://ddragon.leagueoflegends.com/cdn/14.19.1/img/spell/${spell.image.full}\" alt=\"${spell.name}\">\n                                <p>${spell.name}</p>\n                                <p>${spell.description}</p>\n                            </div>\n                        `).join(\"\") : \"<p>No hay habilidades disponibles.</p>\"}\n                    </div>\n                </div>\n            </div>\n        `;\n        // Mostrar el modal\n        imagenGrande.style.display = \"flex\"; // Cambiado a 'flex' para centrar el contenido\n        // Seleccionar el elemento de la imagen grande correctamente después de que se ha agregado al DOM\n        const imgGrandeElement = document.getElementById(\"img-grande\");\n        // Evento para cambiar la skin al hacer clic en la imagen grande\n        imgGrandeElement.onclick = async ()=>{\n            await this.cambiarSkin(imgGrandeElement);\n        };\n        // Cerrar el modal al hacer clic en el botón de cierre\n        document.getElementById(\"cerrar-imagen-grande\").onclick = ()=>{\n            imagenGrande.style.display = \"none\";\n        };\n    }\n}\n\n});\n\n\nparcelRequire(\"N0Tqk\");\n\n//# sourceMappingURL=index.9ba9119e.js.map\n","export class Campeon {\n    constructor(data) {\n        this.name = data.name; // Nombre del campeón\n        this.imageUrl = `https://ddragon.leagueoflegends.com/cdn/14.19.1/img/champion/${data.image.full}`; // URL de la imagen del campeón\n        this.title = data.title || \"Sin título\"; // Título del campeón\n        this.id = data.id; // ID del campeón\n        this.skins = []; // Inicializar como un array vacío\n        this.roles = data.tags; // Roles del campeón\n        this.blurb = data.blurb; // Descripción del campeón\n        this.info = data.info; // Información de ataque, defensa, magia y dificultad\n        this.currentSkinIndex = 0; // Inicializar el índice de skin\n        this.abilities = []; // Inicializar como un array vacío para habilidades\n\n        // Cargar skins y habilidades\n        this.loadSkins();\n        this.loadAbilities();\n    }\n\n    async loadSkins() {\n        try {\n            const response = await fetch(`https://ddragon.leagueoflegends.com/cdn/14.19.1/data/es_MX/champion/${this.id}.json`);\n            const data = await response.json();\n\n            // Asignar la lista de skins\n            this.skins = data.data[this.id].skins;\n            console.log(\"Skins disponibles:\", this.skins); // Verificar las skins\n        } catch (error) {\n            console.error(\"Error al cargar las skins:\", error);\n        }\n    }\n\n    async loadAbilities() {\n        try {\n            const response = await fetch(`https://ddragon.leagueoflegends.com/cdn/14.19.1/data/es_MX/champion/${this.id}.json`);\n            const data = await response.json();\n            \n            this.abilities = data.data[this.id].spells || []; // Asegúrate de que abilities sea un array\n            console.log(\"Habilidades disponibles:\", this.abilities); // Verificar las habilidades\n        } catch (error) {\n            console.error(\"Error al cargar las habilidades:\", error);\n        }\n    }\n\n    async checkImageExists(url) {\n        const response = await fetch(url, { method: 'HEAD' });\n        return response.ok; // Verifica si la imagen existe\n    }\n\n    async cambiarSkin(championImg) {\n        const maxSkins = this.skins.length; // Total de skins disponibles\n        console.log(`Total de skins: ${maxSkins}`);\n\n        // Incrementa currentSkinIndex\n        this.currentSkinIndex = (this.currentSkinIndex + 1) % (maxSkins + 1); // Incrementa y devuelve el nuevo número de skin (modulo para volver al principio)\n\n        let skinUrl;\n\n        // Determine the URL for the current skin\n        if (this.currentSkinIndex === 0) {\n            // Skin original\n            skinUrl = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_0.jpg`;\n        } else {\n            // Usar el id de la skin correcta\n            const skinId = this.skins[this.currentSkinIndex - 1].num; // Asegúrate de usar 'num' para obtener el número correcto de skin\n            skinUrl = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_${skinId}.jpg`;\n        }\n\n        const imageExists = await this.checkImageExists(skinUrl);\n        if (imageExists) {\n            championImg.src = skinUrl; // Cambia la imagen si existe\n        } else {\n            // Si la imagen no existe, simplemente vuelve a la skin original\n            this.currentSkinIndex = 0; // Reinicia el índice\n            championImg.src = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_0.jpg`; // Cambia a la skin original\n        }\n    }\n\n    crearElemento() {\n        const championDiv = document.createElement('div');\n        championDiv.classList.add('champion');\n\n        const img = document.createElement('img'); // Usar la etiqueta img para la imagen completa\n        img.src = this.imageUrl;\n        img.alt = this.name;\n        img.id = `img-${this.id}`; // Asignar un id a la imagen del campeón\n\n        const name = document.createElement('p');\n        name.textContent = this.name;\n\n        const additionalInfo = document.createElement('div');\n        additionalInfo.classList.add('additional-info'); // Contenedor para información adicional\n        additionalInfo.innerHTML = `\n            <p><strong>Roles:</strong> ${this.roles.join(', ')}</p>\n            <p><strong>Título:</strong> ${this.title}</p>\n        `;\n\n        championDiv.appendChild(img); // Agregar la imagen\n        championDiv.appendChild(name);\n        championDiv.appendChild(additionalInfo); // Agregar el contenedor de información adicional\n\n        // Evento para mostrar información del campeón\n        championDiv.addEventListener('click', () => {\n            this.mostrarInformacionCampeon();\n        });\n\n        return championDiv;\n    }\n\n    mostrarInformacionCampeon() {\n        const fullImageUrl = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_0.jpg`;\n    \n        // Crear o seleccionar el contenedor donde se mostrará la imagen grande\n        let imagenGrande = document.getElementById('imagen-grande');\n        if (!imagenGrande) {\n            imagenGrande = document.createElement('div');\n            imagenGrande.id = 'imagen-grande';\n            document.body.appendChild(imagenGrande);\n        }\n    \n        // Insertar la imagen y la información en el contenedor\n        imagenGrande.innerHTML = `\n            <div class=\"imagen-grande-container\">\n                <span id=\"cerrar-imagen-grande\">&times;</span>\n                <img id=\"img-grande\" src=\"${fullImageUrl}\" alt=\"Imagen Grande de ${this.name}\">\n                <div class=\"imagen-grande-texto\">\n                    <h2>${this.name}</h2>\n                    <p><strong>Título:</strong> ${this.title}</p>\n                    <p><strong>Descripción:</strong> ${this.blurb}</p>\n                    <h3>Atributos:</h3>\n                    <ul>\n                        <li><strong>Ataque:</strong> ${this.info.attack}</li>\n                        <li><strong>Defensa:</strong> ${this.info.defense}</li>\n                        <li><strong>Magia:</strong> ${this.info.magic}</li>\n                        <li><strong>Dificultad:</strong> ${this.info.difficulty}</li>\n                    </ul>\n                    <h3>Roles:</h3>\n                    <p>${this.roles.join(', ')}</p>\n                    <h3>Habilidades:</h3>\n                    <div class=\"abilities\">\n                        ${this.abilities.length > 0 ? this.abilities.map(spell => `\n                            <div class=\"ability\">\n                                <img src=\"https://ddragon.leagueoflegends.com/cdn/14.19.1/img/spell/${spell.image.full}\" alt=\"${spell.name}\">\n                                <p>${spell.name}</p>\n                                <p>${spell.description}</p>\n                            </div>\n                        `).join('') : '<p>No hay habilidades disponibles.</p>'}\n                    </div>\n                </div>\n            </div>\n        `;\n    \n        // Mostrar el modal\n        imagenGrande.style.display = 'flex'; // Cambiado a 'flex' para centrar el contenido\n    \n        // Seleccionar el elemento de la imagen grande correctamente después de que se ha agregado al DOM\n        const imgGrandeElement = document.getElementById('img-grande');\n    \n        // Evento para cambiar la skin al hacer clic en la imagen grande\n        imgGrandeElement.onclick = async () => {\n            await this.cambiarSkin(imgGrandeElement);\n        };\n    \n        // Cerrar el modal al hacer clic en el botón de cierre\n        document.getElementById('cerrar-imagen-grande').onclick = () => {\n            imagenGrande.style.display = 'none';\n        };\n    }\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$09354508ee2e2a25$export$f04f082b873ac4d4","set","s","enumerable","configurable","constructor","data","name","imageUrl","image","full","title","skins","roles","tags","blurb","info","currentSkinIndex","abilities","loadSkins","loadAbilities","response","fetch","json","console","log","error","spells","checkImageExists","url","method","ok","cambiarSkin","championImg","skinUrl","maxSkins","length","skinId","num","src","crearElemento","championDiv","document","createElement","classList","add","img","alt","textContent","additionalInfo","innerHTML","join","appendChild","addEventListener","mostrarInformacionCampeon","fullImageUrl","imagenGrande","getElementById","body","attack","defense","magic","difficulty","map","spell","description","style","display","imgGrandeElement","onclick"],"version":3,"file":"index.9ba9119e.js.map"}