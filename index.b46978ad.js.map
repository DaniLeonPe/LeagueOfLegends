{"mappings":"","sources":["src/js/Campeon.js"],"sourcesContent":["class Campeon {\n    constructor(data) {\n        this.name = data.name; // Nombre del campeón\n        this.imageUrl = `https://ddragon.leagueoflegends.com/cdn/14.19.1/img/champion/${data.image.full}`; // URL de la imagen del campeón\n        this.title = data.title || \"Sin título\"; // Título del campeón\n        this.id = data.id; // ID del campeón\n        this.skins = []; // Inicializar como un array vacío\n        this.roles = data.tags; // Roles del campeón\n        this.blurb = data.blurb; // Descripción del campeón\n        this.info = data.info; // Información de ataque, defensa, magia y dificultad\n        this.currentSkinIndex = 0; // Inicializar el índice de skin\n        this.abilities = []; // Inicializar como un array vacío para habilidades\n\n        // Cargar skins y habilidades\n        this.loadSkins();\n        this.loadAbilities();\n    }\n\n    async loadSkins() {\n        try {\n            const response = await fetch(`https://ddragon.leagueoflegends.com/cdn/14.19.1/data/es_MX/champion/${this.id}.json`);\n            const data = await response.json();\n\n            // Asignar la lista de skins\n            this.skins = data.data[this.id].skins;\n            console.log(\"Skins disponibles:\", this.skins); // Verificar las skins\n        } catch (error) {\n            console.error(\"Error al cargar las skins:\", error);\n        }\n    }\n\n    async loadAbilities() {\n        try {\n            const response = await fetch(`https://ddragon.leagueoflegends.com/cdn/14.19.1/data/es_MX/champion/${this.id}.json`);\n            const data = await response.json();\n            \n            this.abilities = data.data[this.id].spells || []; // Asegúrate de que abilities sea un array\n            console.log(\"Habilidades disponibles:\", this.abilities); // Verificar las habilidades\n        } catch (error) {\n            console.error(\"Error al cargar las habilidades:\", error);\n        }\n    }\n\n    async checkImageExists(url) {\n        const response = await fetch(url, { method: 'HEAD' });\n        return response.ok; // Verifica si la imagen existe\n    }\n\n    async cambiarSkin(championImg) {\n        const maxSkins = this.skins.length; // Total de skins disponibles\n        console.log(`Total de skins: ${maxSkins}`);\n\n        // Incrementa currentSkinIndex\n        this.currentSkinIndex = (this.currentSkinIndex + 1) % (maxSkins + 1); // Incrementa y devuelve el nuevo número de skin (modulo para volver al principio)\n\n        let skinUrl;\n\n        // Determine the URL for the current skin\n        if (this.currentSkinIndex === 0) {\n            // Skin original\n            skinUrl = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_0.jpg`;\n        } else {\n            // Usar el id de la skin correcta\n            const skinId = this.skins[this.currentSkinIndex - 1].num; // Asegúrate de usar 'num' para obtener el número correcto de skin\n            skinUrl = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_${skinId}.jpg`;\n        }\n\n        const imageExists = await this.checkImageExists(skinUrl);\n        if (imageExists) {\n            championImg.src = skinUrl; // Cambia la imagen si existe\n        } else {\n            // Si la imagen no existe, simplemente vuelve a la skin original\n            this.currentSkinIndex = 0; // Reinicia el índice\n            championImg.src = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_0.jpg`; // Cambia a la skin original\n        }\n    }\n\n    crearElemento() {\n        const championDiv = document.createElement('div');\n        championDiv.classList.add('champion');\n\n        const img = document.createElement('img'); // Usar la etiqueta img para la imagen completa\n        img.src = this.imageUrl;\n        img.alt = this.name;\n        img.id = `img-${this.id}`; // Asignar un id a la imagen del campeón\n\n        const name = document.createElement('p');\n        name.textContent = this.name;\n\n        const additionalInfo = document.createElement('div');\n        additionalInfo.classList.add('additional-info'); // Contenedor para información adicional\n        additionalInfo.innerHTML = `\n            <p><strong>Roles:</strong> ${this.roles.join(', ')}</p>\n            <p><strong>Título:</strong> ${this.title}</p>\n        `;\n\n        championDiv.appendChild(img); // Agregar la imagen\n        championDiv.appendChild(name);\n        championDiv.appendChild(additionalInfo); // Agregar el contenedor de información adicional\n\n        // Evento para mostrar información del campeón\n        championDiv.addEventListener('click', () => {\n            this.mostrarInformacionCampeon();\n        });\n\n        return championDiv;\n    }\n\n    mostrarInformacionCampeon() {\n        const fullImageUrl = `https://ddragon.leagueoflegends.com/cdn/img/champion/loading/${this.id}_0.jpg`;\n    \n        // Crear o seleccionar el contenedor donde se mostrará la imagen grande\n        let imagenGrande = document.getElementById('imagen-grande');\n        if (!imagenGrande) {\n            imagenGrande = document.createElement('div');\n            imagenGrande.id = 'imagen-grande';\n            document.body.appendChild(imagenGrande);\n        }\n    \n        // Insertar la imagen y la información en el contenedor\n        imagenGrande.innerHTML = `\n            <div class=\"imagen-grande-container\">\n                <span id=\"cerrar-imagen-grande\">&times;</span>\n                <img id=\"img-grande\" src=\"${fullImageUrl}\" alt=\"Imagen Grande de ${this.name}\">\n                <div class=\"imagen-grande-texto\">\n                    <h2>${this.name}</h2>\n                    <p><strong>Título:</strong> ${this.title}</p>\n                    <p><strong>Descripción:</strong> ${this.blurb}</p>\n                    <h3>Atributos:</h3>\n                    <ul>\n                        <li><strong>Ataque:</strong> ${this.info.attack}</li>\n                        <li><strong>Defensa:</strong> ${this.info.defense}</li>\n                        <li><strong>Magia:</strong> ${this.info.magic}</li>\n                        <li><strong>Dificultad:</strong> ${this.info.difficulty}</li>\n                    </ul>\n                    <h3>Roles:</h3>\n                    <p>${this.roles.join(', ')}</p>\n                    <h3>Habilidades:</h3>\n                    <div class=\"abilities\">\n                        ${this.abilities.length > 0 ? this.abilities.map(spell => `\n                            <div class=\"ability\">\n                                <img src=\"https://ddragon.leagueoflegends.com/cdn/14.19.1/img/spell/${spell.image.full}\" alt=\"${spell.name}\">\n                                <p>${spell.name}</p>\n                                <p>${spell.description}</p>\n                            </div>\n                        `).join('') : '<p>No hay habilidades disponibles.</p>'}\n                    </div>\n                </div>\n            </div>\n        `;\n    \n        // Mostrar el modal\n        imagenGrande.style.display = 'flex'; // Cambiado a 'flex' para centrar el contenido\n    \n        // Seleccionar el elemento de la imagen grande correctamente después de que se ha agregado al DOM\n        const imgGrandeElement = document.getElementById('img-grande');\n    \n        // Evento para cambiar la skin al hacer clic en la imagen grande\n        imgGrandeElement.onclick = async () => {\n            await this.cambiarSkin(imgGrandeElement);\n        };\n    \n        // Cerrar el modal al hacer clic en el botón de cierre\n        document.getElementById('cerrar-imagen-grande').onclick = () => {\n            imagenGrande.style.display = 'none';\n        };\n    }\n}\n"],"names":[],"version":3,"file":"index.b46978ad.js.map"}